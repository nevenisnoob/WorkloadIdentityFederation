# This is a basic workflow to help you get started with Actions

name: gcp-monitor

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onschedule
  schedule:
    - cron: '0 23 * * 1,2,3,4,5'
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "monitoring"
  monitoring:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.TERRAFORM_SERVICE_ACCOUNT_KEY }}'
      
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1.1.1'

      # Runs a single command using the runners shell
      - name: Get the date
        id: get_date
        # 今日の日付　YYYY-MM-DD
        # モニタリングは平日しか走らないため、
        # 月曜の場合、三日前の日付を取得します
        # それ以外の場合、一日前の日付を取得します
        run: |
          if [ "$(date +%u)" == 1 ]; then
            PAST_DATE=$(date -d "3 days ago" '+%Y-%m-%d')
          else
            PAST_DATE=$(date -d "1 day ago" '+%Y-%m-%d')
          fi
          echo "past_date=$PAST_DATE" >> $GITHUB_OUTPUT
        shell: bash

      # Runs a set of commands using the runners shell
      # https://stackoverflow.com/a/74232400
      # https://github.com/github/docs/issues/21529
      - name: search for all gcp resources
        id: gcp_monitoring
        run: |
          echo 'MONITOR_RESULT<<EOF' >> $GITHUB_OUTPUT
          gcloud asset search-all-resources \
            --scope=projects/workload-idenity-federation \
            --order-by="updateTime DESC, assetType" \
            --query="updateTime>=${{ steps.get_date.outputs.past_date }} OR createTime>=${{ steps.get_date.outputs.past_date }}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "$MONITOR_RESULT"
      - name: verify monitoring result
        run: echo "${{ steps.gcp_monitoring.outputs.monitor_result }}"
      - name: send monitoring result to slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "```${{ steps.gcp_monitoring.outputs.monitor_result }}```"
                    }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_FOR_GCP_MONITOR }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
